# postfix.wsa evaluates postfix expressions

    define SP   0  # stack pointer
    define SMIN 2  # stack start address
    define TEMP 1  # address for reading

eval_expr:
    # initialize variable
    push SP; push SMIN; store

    push '('; printc
    push 'e'; printc
    push 'x'; printc
    push 'p'; printc
    push 'r'; printc
    push ')'; printc
    push ' '; printc

.read_token:
    call .read_char
    dup; push '0'; sub; jn .read_operator
    push '9'; copy 1; sub; jn .error_illegal_char

    # positive operand
    push 1
    swap
    jmp .read_operand

# params: sign, char
.read_operand:
    push '0'
    sub
.read_operand_loop:
    call .read_char
    dup; push ' '; sub; jz .read_operand_break
    dup; push '\n'; sub; jz .read_operand_print
    dup; push '0'; sub; jn .error_illegal_char
    push '9'; copy 1; sub; jn .error_illegal_char

    push '0'
    sub
    swap
    push 10
    mul
    add

    jmp .read_operand_loop
.read_operand_break:
    call .read_operand_store
    jmp .read_token
.read_operand_print:
    call .read_operand_store
    jmp .print_result
.read_operand_store:
    drop

    # store operand at SP
    push SP; retrieve
    swap
    store

    # increment SP
    push SP
    dup; retrieve; push 1; add
    store

    # multiply by sign
    mul

    ret

.read_operator:
    dup; push '+'; sub; jz .eval_add
    dup; push '-'; sub; jz .read_minus
    dup; push '*'; sub; jz .eval_mul
    dup; push '/'; sub; jz .eval_div
    dup; push '%'; sub; jz .eval_mod
    dup; push '\n'; sub; jz .print_result
    dup; push ' '; sub; jz .ignore_char
    jmp .error_illegal_char

.read_minus:
    drop
    call .read_char
    dup; push ' '; sub; jz .eval_sub
    dup; push '0'; sub; jn .error_missing_operator_space
    push '9'; copy 1; sub; jn .error_missing_operator_space

    # negative operand
    push '0'
    sub
    push -1
    swap
    jmp .read_operand

.ignore_char:
    drop
    jmp .read_token

.read_char:
    push TEMP
    dup; readc
    retrieve
    dup; jz .read_char_eof
    ret
.read_char_eof:
    drop
    end

.eval_add:
    call .eval_operator
    add
    jmp .eval_operator_done

.eval_sub:
    call .eval_operator
    sub
    store
    store
    jmp .read_token

.eval_mul:
    call .eval_operator
    mul
    jmp .eval_operator_done

.eval_div:
    call .eval_operator
    div
    jmp .eval_operator_done

.eval_mod:
    call .eval_operator
    mod
    jmp .eval_operator_done

.eval_operator:
    drop

    # check underflow
    push SP; retrieve; push 2; sub
    push SMIN
    sub
    jn .error_missing_operand

    # push SP, (*SP)-1, (*SP)-2, *((*SP)-2), and *((*SP)-1)
    push SP
    dup; retrieve; push 1; sub
    dup; push 1; sub
    dup; retrieve
    copy 2; retrieve

    ret

.eval_operator_done:
    store
    store

    call .read_char
    push ' '; sub; jz .read_token
    push '\n'; sub; jz .print_result
    jmp .error_missing_operator_space

.print_result:
    drop

    # check overflow
    push SMIN
    push SP; retrieve
    sub
    dup; jz eval_expr
    push 1; add; jn .error_missing_operator

    push ' '; printc
    push '='; printc
    push '>'; printc
    push ' '; printc

    push SP; retrieve; push 1; sub; retrieve
    printi
    push '\n'; printc

    jmp eval_expr

.consume_line:
    # consume remainder of line
    call .read_char
    push '\n'; sub; jz eval_expr
    jmp .consume_line

.error_illegal_char:
    push 0
    swap
    push ' '
    push ':'
    push 'r'
    push 'e'
    push 't'
    push 'c'
    push 'a'
    push 'r'
    push 'a'
    push 'h'
    push 'c'
    push ' '
    push 'l'
    push 'a'
    push 'g'
    push 'e'
    push 'l'
    push 'l'
    push 'i'
    call .print_error
    jmp .consume_line

.error_missing_operand:
    push 0
    call .string_operand
    push ' '
    call .string_missing
    call .print_error
    jmp .consume_line

.error_missing_operator:
    push 0
    call .string_operator
    push ' '
    call .string_missing
    call .print_error
    jmp eval_expr

.error_missing_operator_space:
    push 0
    call .string_operator
    push ' '
    push 'r'
    push 'e'
    push 't'
    push 'f'
    push 'a'
    push ' '
    push 'e'
    push 'c'
    push 'a'
    push 'p'
    push 's'
    push ' '
    call .string_missing
    call .print_error
    jmp eval_expr

.print_error:
    push ' '
    push ':'
    push 'r'
    push 'o'
    push 'r'
    push 'r'
    push 'E'
    jmp println

.string_operand:
    push 'd'
    push 'n'
    jmp .string_opera
.string_operator:
    push 'r'
    push 'o'
    push 't'
    # fallthrough
.string_opera:
    push 'a'
    push 'r'
    push 'e'
    push 'p'
    push 'o'
    ret
.string_missing:
    push 'g'
    push 'n'
    push 'i'
    push 's'
    push 's'
    push 'i'
    push 'm'
    ret

# println prints a string on the stack terminated with 0 and a LF
# params: char..., 0
println:
    dup; jz .println_done
    printc
    jmp println
.println_done:
    drop
    push '\n'; printc
    ret
