    # variable addresses
    define IP 0    # current instruction pointer
    define SP 1    # stack top pointer
    define CP 2    # call stack top pointer
    define LP 3    # label list pointer
    define JP 4    # jump list pointer
    define TEMP 5  # temporary pointer

    # allocation sizes
    # 199990:    instruction list size (id/argument pairs)
    # 1000:      stack size
    # 1000:      call stack size
    # 1000:      label list size (label/line pairs)
    # 1000:      jump list size
    # unbounded: heap size

    # boundaries for allocation blocks
    # label list and jump list blocks are reused by stack and call stack
    define IMIN 10      # instruction list start
    define IMAX 200000  # instruction list end
    define SMIN 200000  # stack start
    define SMAX 201000  # stack end
    define CMIN 201000  # call stack start
    define CMAX 202000  # call stack end
    define LMIN 200000  # label list start
    define LMAX 201000  # label list end
    define JMIN 201000  # jump list start
    define JMAX 202000  # jump list end
    define HMIN 202000  # heap start

    # assigning initial values
    push IP; push IMIN; store
    push SP; push SMIN; store
    push CP; push CMIN; store
    push LP; push LMIN; store
    push JP; push JMIN; store

    # instruction ids in order of time to find in .select_inst
    define INST_1    0  # selects in 2 instructions
    define INST_2    6  # selects in 8 instructions
    define INST_3   -6
    define INST_4    9  # selects in 14 instructions
    define INST_5    3
    define INST_6   -3
    define INST_7   -9
    define INST_8   10  # selects in 20 instructions
    define INST_9    8
    define INST_10   4
    define INST_11   2
    define INST_12  -2
    define INST_13  -4
    define INST_14  -8
    define INST_15 -10
    define INST_16  11  # selects in 21 instructions
    define INST_17   7
    define INST_18   5
    define INST_19   1
    define INST_20  -1
    define INST_21  -5
    define INST_22  -7
    define INST_23 -11

    # instructions in order of most common
    define DO_INST_1  .do_push;     define INST_PUSH     INST_1
    define DO_INST_2  .do_dup;      define INST_DUP      INST_2
    define DO_INST_3  .do_store;    define INST_STORE    INST_3
    define DO_INST_4  .do_sub;      define INST_SUB      INST_4
    define DO_INST_5  .do_jz;       define INST_JZ       INST_5
    define DO_INST_6  .do_retrieve; define INST_RETRIEVE INST_6
    define DO_INST_7  .do_jmp;      define INST_JMP      INST_7
    define DO_INST_8  .do_call;     define INST_CALL     INST_8
    define DO_INST_9  .do_drop;     define INST_DROP     INST_9
    define DO_INST_10 .do_printc;   define INST_PRINTC   INST_10
    define DO_INST_11 .do_ret;      define INST_RET      INST_11
    define DO_INST_12 .do_add;      define INST_ADD      INST_12
    define DO_INST_13 .do_swap;     define INST_SWAP     INST_13
    define DO_INST_14 .do_printi;   define INST_PRINTI   INST_14
    define DO_INST_15 .do_jn;       define INST_JN       INST_15
    define DO_INST_16 .do_end;      define INST_END      INST_16
    define DO_INST_17 .do_mul;      define INST_MUL      INST_17
    define DO_INST_18 .do_readc;    define INST_READC    INST_18
    define DO_INST_19 .do_readi;    define INST_READI    INST_19
    define DO_INST_20 .do_copy;     define INST_COPY     INST_20
    define DO_INST_21 .do_slide;    define INST_SLIDE    INST_21
    define DO_INST_22 .do_div;      define INST_DIV      INST_22
    define DO_INST_23 .do_mod;      define INST_MOD      INST_23


    # dropped by .read_char
    push 0
parse:
    call .read_char
    dup; push ' ';  sub; jz .parse_stack
    dup; push '\t'; sub; jz .parse_imp_tab
    dup; push '\n'; sub; jz .parse_flow
    dup; push 1; sub; jn setup_labels
    jmp parse
.parse_imp_tab:
    call .read_char
    dup; push ' ';  sub; jz .parse_arith
    dup; push '\t'; sub; jz .parse_heap
    dup; push '\n'; sub; jz .parse_io
    dup; push 1; sub; jn .err_incomplete_T
    jmp .parse_imp_tab

.parse_stack:
    call .read_char
    dup; push ' ';  sub; jz .parsed_push
    dup; push '\t'; sub; jz .parse_stack_tab
    dup; push '\n'; sub; jz .parse_stack_lf
    dup; push 1; sub; jn .err_incomplete_S
    jmp .parse_stack
.parse_stack_tab:
    call .read_char
    dup; push ' ';  sub; jz .parsed_copy
    dup; push '\t'; sub; jz .err_invalid_STT
    dup; push '\n'; sub; jz .parsed_slide
    dup; push 1; sub; jn .err_incomplete_ST
    jmp .parse_stack_tab
.parse_stack_lf:
    call .read_char
    dup; push ' ';  sub; jz .parsed_dup
    dup; push '\t'; sub; jz .parsed_swap
    dup; push '\n'; sub; jz .parsed_drop
    dup; push 1; sub; jn .err_incomplete_SL
    jmp .parse_stack_lf

.parse_arith:
    call .read_char
    dup; push ' ';  sub; jz .parse_arith_space
    dup; push '\t'; sub; jz .parse_arith_tab
    dup; push '\n'; sub; jz .err_invalid_TSL
    dup; push 1; sub; jn .err_incomplete_TS
    jmp .parse_arith
.parse_arith_space:
    call .read_char
    dup; push ' ';  sub; jz .parsed_add
    dup; push '\t'; sub; jz .parsed_sub
    dup; push '\n'; sub; jz .parsed_mul
    dup; push 1; sub; jn .err_incomplete_TSS
    jmp .parse_arith_space
.parse_arith_tab:
    call .read_char
    dup; push ' ';  sub; jz .parsed_div
    dup; push '\t'; sub; jz .parsed_mod
    dup; push '\n'; sub; jz .err_invalid_TSTL
    dup; push 1; sub; jn .err_incomplete_TST
    jmp .parse_arith_tab

.parse_heap:
    call .read_char
    dup; push ' ';  sub; jz .parsed_store
    dup; push '\t'; sub; jz .parsed_retrieve
    dup; push '\n'; sub; jz .err_invalid_TTL
    dup; push 1; sub; jn .err_incomplete_TT
    jmp .parse_heap

.parse_flow:
    call .read_char
    dup; push ' ';  sub; jz .parse_flow_space
    dup; push '\t'; sub; jz .parse_flow_tab
    dup; push '\n'; sub; jz .parse_flow_lf
    dup; push 1; sub; jn .err_incomplete_L
    jmp .parse_arith_tab
.parse_flow_space:
    call .read_char
    dup; push ' ';  sub; jz .parsed_label
    dup; push '\t'; sub; jz .parsed_call
    dup; push '\n'; sub; jz .parsed_jmp
    dup; push 1; sub; jn .err_incomplete_LS
    jmp .parse_flow_space
.parse_flow_tab:
    call .read_char
    dup; push ' ';  sub; jz .parsed_jz
    dup; push '\t'; sub; jz .parsed_jn
    dup; push '\n'; sub; jz .parsed_ret
    dup; push 1; sub; jn .err_incomplete_LT
    jmp .parse_flow_tab
.parse_flow_lf:
    call .read_char
    dup; push ' ';  sub; jz .err_invalid_LLS
    dup; push '\t'; sub; jz .err_invalid_LLT
    dup; push '\n'; sub; jz .parsed_end
    dup; push 1; sub; jn .err_incomplete_LL
    jmp .parse_flow_lf

.parse_io:
    call .read_char
    dup; push ' ';  sub; jz .parse_io_space
    dup; push '\t'; sub; jz .parse_io_tab
    dup; push '\n'; sub; jz .err_invalid_TLL
    dup; push 1; sub; jn .err_incomplete_TL
    jmp .parse_io
.parse_io_space:
    call .read_char
    dup; push ' ';  sub; jz .parsed_printc
    dup; push '\t'; sub; jz .parsed_printi
    dup; push '\n'; sub; jz .err_invalid_TLSL
    dup; push 1; sub; jn .err_incomplete_TLS
    jmp .parse_flow_space
.parse_io_tab:
    call .read_char
    dup; push ' ';  sub; jz .parsed_readc
    dup; push '\t'; sub; jz .parsed_readi
    dup; push '\n'; sub; jz .err_invalid_TLTL
    dup; push 1; sub; jn .err_incomplete_TLT
    jmp .parse_flow_tab

# returns parsed signed integer on top of stack
.parse_signed:
    call .read_char
    dup; push ' ';  sub; jz .parse_unsigned
    dup; push '\t'; sub; jz .parse_signed_negative
    dup; push '\n'; sub; jz .parse_signed_zero
    dup; push 1; sub; jn .err_unterminated_number
    jmp .parse_signed
.parse_signed_negative:
    call .parse_unsigned
    push -1
    mul
    ret
.parse_signed_zero:
    push 0
    ret

# returns parsed unsigned integer on top of stack
.parse_unsigned:
    push 0
.parse_unsigned_loop:
    swap
    call .read_char
    dup; push ' ';  sub; jz .parse_unsigned_zero
    dup; push '\t'; sub; jz .parse_unsigned_one
    dup; push '\n'; sub; jz .parse_unsigned_end
    dup; push 1; sub; jn .err_unterminated_number
    jmp .parse_unsigned_loop
.parse_unsigned_zero:
    swap
    push 2
    mul
    jmp .parse_unsigned_loop
.parse_unsigned_one:
    swap
    push 2
    mul
    push 1
    add
    jmp .parse_unsigned_loop
.parse_unsigned_end:
    swap
    ret

.read_char:
    drop
    push TEMP
    dup
    readc
    retrieve
    ret


# pushes instruction ID and stores instruction in instruction list
.parsed_push:     push INST_PUSH;     jmp .parsed_inst_number_arg
.parsed_dup:      push INST_DUP;      jmp .parsed_inst
.parsed_copy:     push INST_COPY;     jmp .parsed_inst_number_arg
.parsed_swap:     push INST_SWAP;     jmp .parsed_inst
.parsed_drop:     push INST_DROP;     jmp .parsed_inst
.parsed_slide:    push INST_SLIDE;    jmp .parsed_inst_number_arg
.parsed_add:      push INST_ADD;      jmp .parsed_inst
.parsed_sub:      push INST_SUB;      jmp .parsed_inst
.parsed_mul:      push INST_MUL;      jmp .parsed_inst
.parsed_div:      push INST_DIV;      jmp .parsed_inst
.parsed_mod:      push INST_MOD;      jmp .parsed_inst
.parsed_store:    push INST_STORE;    jmp .parsed_inst
.parsed_retrieve: push INST_RETRIEVE; jmp .parsed_inst
.parsed_call:     push INST_CALL;     jmp .parsed_inst_label_arg
.parsed_jmp:      push INST_JMP;      jmp .parsed_inst_label_arg
.parsed_jz:       push INST_JZ;       jmp .parsed_inst_label_arg
.parsed_jn:       push INST_JN;       jmp .parsed_inst_label_arg
.parsed_ret:      push INST_RET;      jmp .parsed_inst
.parsed_end:      push INST_END;      jmp .parsed_inst
.parsed_printc:   push INST_PRINTC;   jmp .parsed_inst
.parsed_printi:   push INST_PRINTI;   jmp .parsed_inst
.parsed_readc:    push INST_READC;    jmp .parsed_inst
.parsed_readi:    push INST_READI;    jmp .parsed_inst

# adds label to label stack
.parsed_label:
    call .parse_unsigned

    # push LP and address at LP
    push LP
    dup
    retrieve

    # store IP at address at LP+1
    dup
    push 1
    add
    push IP
    retrieve
    store

    # increment LP
    swap
    copy 1
    push 2
    add
    store

    # store label at address at LP
    swap
    store

    jmp parse

.parsed_inst_label_arg:
    swap
    call .parse_unsigned

    # push JP and address at JP
    push JP
    dup
    retrieve

    # store IP+1 at address at LP
    dup
    push IP
    retrieve
    push 1
    add
    store

    # increment LP
    push 1
    add
    store

    jmp .store_inst_arg

.parsed_inst_number_arg:
    swap
    call .parse_signed
    # fallthrough

.store_inst_arg:
    # store argument at IP+1
    push IP
    retrieve
    push 1
    add
    swap
    store

    swap
    # fallthrough

.parsed_inst:
    # push IP and address at IP
    push IP
    dup
    retrieve

    # increment IP
    swap
    copy 1
    push 2
    add
    store

    # store instruction id at IP
    swap
    store

    jmp parse


# replace labels with instruction indices
setup_labels:
    # init jump loop
    push JP
    retrieve
    push JMIN
.jump_loop:
    # check jump loop bounds
    dup
    copy 2
    sub; jz interpret

    # init label loop
    push LP
    retrieve
    push LMIN
.label_loop:
    # check label loop bounds
    dup
    copy 2
    sub; jz .err_label_not_found

    # push current label and label of current jump
    dup
    retrieve
    copy 3
    retrieve
    retrieve
    # check if labels match
    sub; jz .replace_label

.label_loop_continue:
    # increment label loop
    push 1
    add
    jmp .label_loop

.jump_loop_continue:
    # drop label loop bounds
    drop
    drop
    # increment jump loop
    push 1
    add
    jmp .jump_loop

.replace_label:
    # push address of jump and instruction index of label
    copy 2
    retrieve
    copy 1
    push 1
    add
    retrieve
    # replace jump label with index
    store
    jmp .jump_loop_continue


interpret:
    # drop label setup loop bounds
    drop
    drop

    # append end instruction
    push IP
    dup
    retrieve
    push INST_END
    store

    # reset IP to IMIN
    push IMIN
    store
    jmp .select_inst

.select_next_inst:
    # increment IP
    push IP
    dup
    retrieve
    push 2
    add
    store
    # fallthrough

# find instruction with binary search
.select_inst:
    # drop temp value
    drop

    # push current instruction ID
    push IP
    retrieve
    retrieve

    dup; jz DO_INST_1
    dup; jn .select_inst_L
    # fallthrough
# .select_inst_R:
    push 6; sub
    dup; jz DO_INST_2
    dup; jn .select_inst_RL
    # fallthrough
# .select_inst_RR:
    push 3; sub
    dup; jz DO_INST_4
    dup; jn .select_inst_RRL
    # fallthrough
# .select_inst_RRR:
    push 1; sub
    dup; jz DO_INST_8
    jmp DO_INST_16
.select_inst_RRL:
    push 1; add
    dup; jz DO_INST_9
    jmp DO_INST_17
.select_inst_RL:
    push 3; add
    dup; jz DO_INST_5
    dup; jn .select_inst_RLL
    # fallthrough
# .select_inst_RLR:
    push 1; sub
    dup; jz DO_INST_10
    jmp DO_INST_18
.select_inst_RLL:
    push 1; add
    dup; jz DO_INST_11
    jmp DO_INST_19
.select_inst_L:
    push 6; add
    dup; jz DO_INST_3
    dup; jn .select_inst_LL
    # fallthrough
# .select_inst_LR:
    push 3; sub
    dup; jz DO_INST_6
    dup; jn .select_inst_LRL
    # fallthrough
# .select_inst_LRR:
    push 1; sub
    dup; jz DO_INST_12
    jmp DO_INST_20
.select_inst_LRL:
    push 1; add
    dup; jz DO_INST_13
    jmp DO_INST_21
.select_inst_LL:
    push 3; add
    dup; jz DO_INST_7
    dup; jn .select_inst_LLL
    # fallthrough
# .select_inst_LLR:
    push 1; sub
    dup; jz DO_INST_14
    jmp DO_INST_22
.select_inst_LLL:
    push 1; add
    dup; jz DO_INST_15
    jmp DO_INST_23


.do_push:
    # push 0; push 'h'; push 's'; push 'u'; push 'p'; call .debug_inst_arg

    # push SP and *SP
    push SP
    dup
    retrieve

    # store argument in stack
    dup
    push IP
    retrieve
    push 1
    add
    retrieve
    store

    # increment SP
    push 1
    add
    store

    jmp .select_next_inst

.do_dup:
    # push 0; push 'p'; push 'u'; push 'd'; call .debug_inst

    push 1; call .check_stack_underflow

    # push SP and *SP
    push SP
    dup
    retrieve

    # duplicate top of stack
    dup
    dup
    push 1
    sub
    retrieve
    store

    # increment SP
    push 1
    add
    store

    jmp .select_next_inst

.do_copy:
    # push 0; push 'y'; push 'p'; push 'o'; push 'c'; call .debug_inst_arg

    # replace temp value with argument
    drop

    # push argument+1
    push IP
    retrieve
    push 1
    add
    retrieve
    push 1
    add

    dup; call .check_stack_underflow

    # push SP and *SP
    push SP
    dup
    retrieve

    # store *(*SP-n-1) in stack
    dup
    dup
    copy 4
    sub
    retrieve
    store

    # increment SP
    push 1
    add
    store

    jmp .select_next_inst

.do_swap:
    # push 0; push 'p'; push 'a'; push 'w'; push 's'; call .debug_inst

    push 2; call .check_stack_underflow

    # push *SP-1, *(*SP-2), *SP-2, and *(*SP-1)
    push SP
    retrieve
    push 1
    sub
    dup
    push 1
    sub
    dup
    retrieve
    swap
    copy 2
    retrieve

    # swap top two items
    store
    store

    jmp .select_next_inst

.do_drop:
    # push 0; push 'p'; push 'o'; push 'r'; push 'd'; call .debug_inst

    push 1; call .check_stack_underflow

    # decrement SP
    push SP
    dup
    retrieve
    push 1
    sub
    store

    jmp .select_next_inst

.do_slide:
    # push 0; push 'e'; push 'd'; push 'i'; push 'l'; push 's'; call .debug_inst
    jmp .err_unimplemented_inst

.do_add:
    # push 0; push 'd'; push 'd'; push 'a'; call .debug_inst
    call .arith_retrieve
    add
    jmp .arith_store

.do_sub:
    # push 0; push 'b'; push 'u'; push 's'; call .debug_inst
    call .arith_retrieve
    sub
    jmp .arith_store

.do_mul:
    # push 0; push 'l'; push 'u'; push 'm'; call .debug_inst
    call .arith_retrieve
    mul
    jmp .arith_store

.do_div:
    # push 0; push 'v'; push 'i'; push 'd'; call .debug_inst
    call .arith_retrieve
    dup; jz .err_division_by_zero
    div
    jmp .arith_store

.do_mod:
    # push 0; push 'd'; push 'o'; push 'm'; call .debug_inst
    call .arith_retrieve
    mod
    jmp .arith_store

.do_store:
    # push 0; push 'e'; push 'r'; push 'o'; push 't'; push 's'; call .debug_inst

    push 2; call .check_stack_underflow

    # push SP and *SP-2
    push SP
    dup
    retrieve
    push 2
    sub

    # push transformed *SP-2 and *SP-1
    dup
    retrieve
    call .to_heap_addr
    copy 1
    push 1
    add
    retrieve

    store

    # decrement SP by 2
    store

    jmp .select_next_inst

.do_retrieve:
    # push 0; push 'e'; push 'v'; push 'e'; push 'i'; push 'r'; push 't'; push 'e'; push 'r'; call .debug_inst

    push 1; call .check_stack_underflow

    # push SP and *SP-1
    push SP
    retrieve
    push 1
    sub

    # retrieve heap value and push to stack
    dup
    retrieve
    call .to_heap_addr
    retrieve
    store

    jmp .select_next_inst

.do_call:
    # push 0; push 'l'; push 'l'; push 'a'; push 'c'; call .debug_inst_arg

    # push CP, *CP, and *CP
    push CP
    dup
    retrieve
    dup

    # push *IP+2
    push IP
    retrieve
    push 2
    add

    # store *IP+2 at *CP
    store

    # increment CP
    push 1
    add
    store

    # fallthrough

.do_jmp:
    # push 0; push 'p'; push 'm'; push 'j'; call .debug_inst_arg

    # push IP and address of jmp label
    push IP
    dup
    retrieve
    push 1
    add
    retrieve

    # jump to label
    store

    jmp .select_inst

.do_jz:
    # push 0; push 'z'; push 'j'; call .debug_inst_arg

    call .pop_stack
    jz .do_jmp
    jmp .select_next_inst

.do_jn:
    # push 0; push 'n'; push 'j'; call .debug_inst_arg

    call .pop_stack
    jn .do_jmp
    jmp .select_next_inst

.do_ret:
    # push 0; push 't'; push 'e'; push 'r'; call .debug_inst

    call .check_call_stack_underflow

    # push CP and *CP-1
    push CP
    dup
    retrieve
    push 1
    sub

    # return to caller
    push IP
    copy 1
    retrieve
    store

    # decrement CP
    store

    jmp .select_inst

.do_end:
    # push 0; push 'd'; push 'n'; push 'e'; call .debug_inst

    # drop temp value and end
    drop
    end

.do_printc:
    # push 0; push 'c'; push 't'; push 'n'; push 'i'; push 'r'; push 'p'; call .debug_inst

    call .pop_stack
    printc
    jmp .select_next_inst

.do_printi:
    # push 0; push 'i'; push 't'; push 'n'; push 'i'; push 'r'; push 'p'; call .debug_inst

    call .pop_stack
    printi
    jmp .select_next_inst

.do_readc:
    # push 0; push 'c'; push 'd'; push 'a'; push 'e'; push 'r'; call .debug_inst

    call .pop_stack
    call .to_heap_addr
    readc
    jmp .select_next_inst

.do_readi:
    # push 0; push 'i'; push 'd'; push 'a'; push 'e'; push 'r'; call .debug_inst

    call .pop_stack
    call .to_heap_addr
    readi
    jmp .select_next_inst

# returns SP, *SP-1, *SP-2, *(*SP-2), and *(*SP-1)
.arith_retrieve:
    # push SP and *SP-1
    push SP
    dup
    retrieve
    push 1
    sub

    # push *SP-2
    dup
    push 1
    sub

    # push *(*SP-2)
    dup
    retrieve

    # push *(*SP-1)
    copy 2
    retrieve

    ret

.arith_store:
    # store modified value
    store
    # decrement SP
    store
    jmp .select_next_inst

.pop_stack:
    push 1; call .check_stack_underflow

    # push SP and *SP-1
    push SP
    dup
    retrieve
    push 1
    sub

    # decrement SP
    swap
    copy 1
    store

    # push *(*SP-1)
    retrieve

    ret

# params: addr
.to_heap_addr:
    push 2
    mul
    dup; jn .to_heap_addr_neg
.to_heap_addr_done:
    push HMIN
    add
    ret
.to_heap_addr_neg:
    push -1
    mul
    push 1
    add
    jmp .to_heap_addr_done

# params: count
.check_stack_underflow:
    # push *SP-count and SMIN
    push SP
    retrieve
    swap
    sub
    push SMIN

    # underflow if *SP-count < SMIN
    sub; jn .err_stack_underflow
    ret

.check_call_stack_underflow:
    # push *CP-1 and CMIN
    push CP
    retrieve
    push 1
    sub
    push CMIN

    # underflow if *CP-1 < CMIN
    sub; jn .err_call_stack_underflow
    ret


# expects zero on top of stack
.err_incomplete_ST:  call .str_tab;   jmp .err_incomplete_S
.err_incomplete_SL:  call .str_lf;    # fallthrough
.err_incomplete_S:   call .str_space; jmp .err_incomplete
.err_incomplete_TSS: call .str_space; jmp .err_incomplete_TS
.err_incomplete_TST: call .str_tab;   # fallthrough
.err_incomplete_TS:  call .str_space; jmp .err_incomplete_T
.err_incomplete_TT:  call .str_tab;   jmp .err_incomplete_T
.err_incomplete_TLS: call .str_space; jmp .err_incomplete_TL
.err_incomplete_TLT: call .str_tab;   # fallthrough
.err_incomplete_TL:  call .str_lf;    # fallthrough
.err_incomplete_T:   call .str_tab;   jmp .err_incomplete
.err_incomplete_LS:  call .str_space; jmp .err_incomplete_L
.err_incomplete_LT:  call .str_tab;   jmp .err_incomplete_L
.err_incomplete_LL:  call .str_lf;    # fallthrough
.err_incomplete_L:   call .str_lf;    # fallthrough

.err_incomplete:
    push ' '
    push ':'
    call .str_instruction
    push ' '
    push 'e'
    push 't'
    push 'e'
    push 'l'
    push 'p'
    push 'm'
    push 'o'
    push 'c'
    push 'n'
    push 'i'
    call .println_error
    end

# expects a temp value on stack
.err_invalid_STT:  push 0;               call .str_tab;   call .str_tab;   call .str_space; jmp .err_invalid
.err_invalid_TSL:  push 0;               call .str_lf;    call .str_space; call .str_tab;   jmp .err_invalid
.err_invalid_TSTL: push 0; call .str_lf; call .str_tab;   call .str_space; call .str_tab;   jmp .err_invalid
.err_invalid_TTL:  push 0;               call .str_lf;    call .str_tab;   call .str_tab;   jmp .err_invalid
.err_invalid_TLL:  push 0;               call .str_lf;    call .str_lf;    call .str_tab;   jmp .err_invalid
.err_invalid_TLSL: push 0; call .str_lf; call .str_space; call .str_lf;    call .str_tab;   jmp .err_invalid
.err_invalid_TLTL: push 0; call .str_lf; call .str_tab;   call .str_lf;    call .str_tab;   jmp .err_invalid
.err_invalid_LLS:  push 0;               call .str_space; call .str_lf;    call .str_lf;    jmp .err_invalid
.err_invalid_LLT:  push 0;               call .str_tab;   call .str_lf;    call .str_lf;    # fallthrough

.err_invalid:
    push ' '
    push ':'
    call .str_instruction
    push ' '
    push 'd'
    push 'i'
    push 'l'
    push 'a'
    push 'v'
    push 'n'
    push 'i'
    call .println_error
    drop
    end

# expects a temp value, partially parsed number, and zero on stack
.err_unterminated_number:
    push ' '
    push ':'
    push 'r'
    push 'e'
    push 'b'
    push 'm'
    push 'u'
    push 'n'
    push ' '
    push 'd'
    push 'e'
    push 't'
    push 'a'
    push 'n'
    push 'i'
    push 'm'
    push 'r'
    push 'e'
    push 't'
    push 'n'
    push 'u'
    call .print_error
    printi
    push '\n'; printc
    drop
    end

.err_unimplemented_inst:
    push 0
    call .str_instruction
    push ' '
    push 'd'
    push 'e'
    push 't'
    push 'n'
    push 'e'
    push 'm'
    push 'e'
    push 'l'
    push 'p'
    push 'm'
    push 'i'
    push 'n'
    push 'u'
    call .println_error
    drop
    end

# expects temp value, loop bound, address of address in jump list, and two loop bounds on stack
.err_label_not_found:
    push 0
    push ' '
    push ':'
    push 'd'
    push 'n'
    push 'u'
    push 'o'
    push 'f'
    push ' '
    push 't'
    push 'o'
    push 'n'
    push ' '
    push 'l'
    push 'e'
    push 'b'
    push 'a'
    push 'l'
    call .print_error
    drop
    drop
    retrieve
    retrieve
    printi
    push '\n'; printc
    drop
    drop
    end

# expects temp value on stack
.err_stack_underflow:
    push 0
    call .str_stack_underflow
    call .println_error
    drop
    end

# expects temp value on stack
.err_call_stack_underflow:
    push 0
    call .str_stack_underflow
    push ' '
    push 'l'
    push 'l'
    push 'a'
    push 'c'
    call .println_error
    drop
    end

# expects four values, numerator, and zero (denominator) on stack
.err_division_by_zero:
    push ' '
    push ':'
    push 'o'
    push 'r'
    push 'e'
    push 'z'
    push ' '
    push 'y'
    push 'b'
    push ' '
    push 'n'
    push 'o'
    push 'i'
    push 's'
    push 'i'
    push 'v'
    push 'i'
    push 'd'
    call .print_error
    printi
    push 0
    push '\n'
    push '0'
    push '/'
    call print
    slide 3
    drop
    end

.str_space:
    push ']'
    push 'e'
    push 'c'
    push 'a'
    push 'p'
    push 'S'
    push '['
    ret
.str_tab:
    push ']'
    push 'b'
    push 'a'
    push 'T'
    push '['
    ret
.str_lf:
    push ']'
    push 'F'
    push 'L'
    push '['
    ret
.str_error:
    push ' '
    push ':'
    push 'r'
    push 'o'
    push 'r'
    push 'r'
    push 'E'
    ret
.str_instruction:
    push 'n'
    push 'o'
    push 'i'
    push 't'
    push 'c'
    push 'u'
    push 'r'
    push 't'
    push 's'
    push 'n'
    push 'i'
    ret
.str_stack_underflow:
    push 'w'
    push 'o'
    push 'l'
    push 'f'
    push 'r'
    push 'e'
    push 'd'
    push 'n'
    push 'u'
    push ' '
    push 'k'
    push 'c'
    push 'a'
    push 't'
    push 's'
    ret

.println_error:
    call .str_error
    jmp println
.print_error:
    call .str_error
    jmp print

.debug_inst:
    jmp println
.debug_inst_arg:
    call print
    push ' '; printc
    push IP
    retrieve
    push 1
    add
    retrieve
    printi
    push '\n'; printc
    ret

# print prints a string on the stack terminated with 0
# params: char..., 0
print:
    dup; jz .print_done
    printc
    jmp print
.print_done:
    drop
    ret

# println prints a string on the stack terminated with 0 and a LF
# params: char..., 0
println:
    call print
    push '\n'; printc
    ret
